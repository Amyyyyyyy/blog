<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[(造轮子)CSS-BEM命名规范]]></title>
    <url>%2F2019%2F11%2F01%2F%E9%80%A0%E8%BD%AE%E5%AD%90-css-BEM%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[写在前面： 这篇文章主要是参考了 element CSS 命名规范，然后在轮子里抽了一个样式目录结构以及规范。让轮子的样式代码更容易阅读和理解，也更可控并严谨，这是在这个轮子里搭一套 CSS 命名规范的意义。 什么是BEM命名规范，大家可以参考这篇文章 CSS — BEM 命名规范 本篇文章主要介绍如何通过 SCSS 来构建一个规则并且所有 .scss 文件遵从此规则进行撰写样式。 样式目录结构先上一张我的样式目录结构图： style 文件夹中包含了 common 文件夹和 mixins 文件夹。 common 文件中主要提取了轮子组件中需要用的的一些公共样式。 var.scss 声明了一系列组件的一些颜色，宽度，等基础变量。如下图： 命名规则编写mixins 文件夹则编写了组件命名规则，上代码截图： 具体代码可以参考我的组件(持续完善中) vue-seven-view 编写组件样式组件只需 import mixins.scss，即可编写简洁明了的样式文件： eg: 1234567@import './mixins.scss'@import './common.scss'@include b(组件名)&#123;true@include e(后代名)&#123;&#125;true@include m(状态)&#123;&#125;&#125; equal to 123456.s-组件名&#123; &#125; ---- B.s-组件名__后代名&#123; &#125; --- E.s-组件名.sm-组件名--状态 --- M 下面上一张被改写过的 scss 文件部分代码： 使用 scss 编写 BEM 规范样式之后，样式文件更易修改和重构，也更简洁明了，这应该是一个轮子最基本的功能( ⊙ o ⊙ )！。]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue 项目迁移 TS]]></title>
    <url>%2F2019%2F11%2F01%2F%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BBTS%2F</url>
    <content type="text"><![CDATA[写在前面： 本文组要讲解如何在 Vue 项目中使用 TypeScript 来搭建并开发项目，以及介绍在此过程中遇到的一些坑。 我的项目各依赖版本： vue@2.5.17 typeScrip@3.5.3 webpack@4.35.3 ts-loader@6.0.4 安装 TypeScript安装必要依赖 npm i --save-dev typescript ts-loader Webpack 配置webpack 入口文件 main.js 修改为 main.ts resolve.extensions 添加 .ts module.rules 添加 .ts 解析规则 此处需注意在解析 ts 时仍需要用babel-loader 进行转换，否则会出现打包报错等问题。 增加 tsconfig.json在项目根路径下添加文件 tsconfig.json 官方推荐配置： 123456789101112// tsconfig.json&#123; "compilerOptions": &#123; // 与 Vue 的浏览器支持保持一致 "target": "es5", // 这可以对 `this` 上的数据属性进行更严格的推断 "strict": true, // 如果使用 webpack 2+ 或 rollup，可以利用 tree-shake: "module": "es2015", "moduleResolution": "node" &#125;&#125; 增加 .vue 文件类型声明src 目录下添加文件 index.d.ts 1234declare module "*.vue" &#123; import Vue from "vue"; export default Vue;&#125; 意思是告诉TypeScript *.vue后缀的文件可以交给vue模块来处理。 项目改造将 .js 文件改写为 .ts 文件 如何改写不再赘述，官方文档介绍得非常详细。 下面介绍一下如何在 Vue 中使用 TypeScript。 安装 Vue TypeScript 装饰器npm i vue-class-component vue-property-decorator --save vue-property-decorator 是在 vue-class-component 上增强了更多结合 Vue 特性的装饰器。更多详细信息参考官方文档 123456789101112131415161718192021import &#123; Component, Emit, Inject, Model, Prop, Provide, Vue, Watch &#125; from 'vue-property-decorator'@Componentexport class MyComponent extends Vue &#123; @Prop() propA: number = 1 @Prop(&#123; default: 'default value' &#125;) propB: string @Prop([String, Boolean]) propC: string | boolean @Prop(&#123; type: null &#125;) propD: any @Watch('child') onChildChanged(val: string, oldVal: string) &#123; &#125;&#125; 具体写法可以参考我的轮子项目 vue-seven-view 贴一张改造完成后的截图：]]></content>
      <categories>
        <category>Typescript</category>
      </categories>
      <tags>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(造轮子)实现组件按需加载功能]]></title>
    <url>%2F2019%2F10%2F31%2F%E9%80%A0%E8%BD%AE%E5%AD%90-%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[写在前面： &emsp;&emsp;&emsp;&emsp;参考了 element-ui 按需加载的实现方式，将每个组件单独打包，使用 babel-plugin-component 插件进行按需引入。实现按需加载功能。 目录结构&emsp;&emsp;&emsp;&emsp;先上一张我项目的目录结构: &emsp;&emsp;&emsp;&emsp; babel-plugin-component 需要的最后打包出来的目录结构: &emsp;&emsp;&emsp;&emsp; 最后项目成功打包出来的目录结构： &emsp;&emsp;&emsp;&emsp; 每个组件目录下增加 index.tsindex.ts 中编写 install 方法，导出组件。 修改 webpack 配置由于想将项目打包逻辑与单独组件打包逻辑分别独立开来，于是单独抽出了一个组件打包配置。 webpack.prod.component.conf 为组件单独打包配置 首先参考 element 抽离出一个存有组件路径的 JSON 文件，如下图： 然后修改 webpack 入口文件配置 最后抽离 css 文件配置，将所有组件的 css 文件都放入一个文件夹中。 babel-plugin-component 插件会通过你设置的这个文件夹名字，在文件夹中寻找组件对应的 css 文件。 全局引入组件为项目增加 index.ts 入口，编写组件 install 方法。 ps: 由于我语言环境是 TS 环境，所以 install 方法中注册组件时用的是 options.name，js 导出直接是 component.name 即可。 发布 npm 包与使用最后发布 npm 包时，需要把你打出的组件目录也一并发布。 使用时只需在 babel.config 中配置 123456789"plugins": [ [ "component", &#123; "libraryName": "你的 npm 库名字", "styleLibraryName": "打包存放 css 文件夹的名字" &#125; ] ] 更多配置请参考官网 下面是我的组件项目打包成功后的使用截图: —end]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[webpack版本升级到4]]></title>
    <url>%2F2018%2F03%2F14%2Fwebpack%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E5%88%B04%2F</url>
    <content type="text"><![CDATA[听说webpack4发布了 于是把组里的项目升级到了webpack4 webpack4新特性环境不再支持Node.js 4.根据 package.json 配置, Node.js 的最低支持版本为 6.11.5; 新特性 配置默认初始化一些配置, 比如 entry 默认 ‘./src’ 开发模式和发布模式, 插件默认内置 CommonsChunk 配置简化 使用 ES6 语法，比如 Map, Set, includes 新增 WebAssembly 构建支持 如果要使用 webpack cli 命令，需要单独再安装 webpack-cli 默认配置在 Webpack 4 中，不再强制要求指定 entry 和 output 路径。webpack 4 会默认 entry 为 ./src，output 为 ./dist 构建模式 mode:Webpack 4 配置, 必须配置 mode 属性， 可选值有 development,production,none development 默认开启插件(无需配置): NamedModulesPlugin-&gt;optimization.namedModules development 模式 使用 eval 构建 module，用来提升构建速度 webpack.DefinePlugin 插件的 process.env.NODE_ENV 的值不需要再定义，默认是 developmentproduction 默认开启插件(无需配置): NoEmitOnErrorsPlugin-&gt;optimization.noEmitOnErrors ModuleConcatenationPlugin-&gt;optimization.concatenateModules webpack.DefinePlugin 插件的 process.env.NODE_ENV 的值不需要再定义，默认是 production 常用插件版本升级eslint-loader: ^ 2.0.0 file-loader:^1.1.10 vue-loader: ^14.1.1 webpack-hot-middleware extract-text-webpack-plugin: ^4.0.0-beta.0 html-webpack-plugin : ^3.0.6 已有项目升级安装 easywebpack-cli 最新版本进行升级 npm i easywebpack-cli -g 升级依赖 easy upgrade 重新安装依赖后，运行即可。 升级当中遇到的问题 相关插件版本要升级 比如说 extract-text-webpack-pluging 没升级到4.0.0-beta.0 的话将会出现如下错误 Error: Chunk.entrypoints: Use Chunks.groupsIterable and filter by instanceof Entrypoint instead 如果需要用到eslint相关 可能会出现以下错误 Module build failed: TypeError: Cannot read property ‘eslint’ of undefined 那么需要修改以下配置 mode: “development”, plugins: [ new webpack.LoaderOptionsPlugin({ options: {} }),]]></content>
      <categories>
        <category>模块化开发</category>
      </categories>
      <tags>
        <tag>webpack4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堆排序]]></title>
    <url>%2F2018%2F03%2F02%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[一、二叉树的概念在计算机科学中，二叉树是每个节点最多有两个子数的树结构。通常子树被称作“左子树”和“右子树”。二叉树的每个结点最多只有二颗子树（不存在度大于2的结点），二叉树的子树有左右之分，次序不能颠倒。二叉树的第i层至多有2^i-1个节点；深度为k的二叉树至多有2^k-1个结点，对任何一颗二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0=n2+1。 树和二叉树的三个主要差别： 树的结点个数至少为1，而二叉树的结点个数可以为0 数中结点的最大度数没有限制，而二叉树结点的最大度数为2 数的结点无左、右之分，而二叉树的结点有左、右之分 二叉树又分为完全二叉树（complete binary tree）和满二叉树（full binary tree） 满二叉树：一颗深度为k，且有2^k-1个节点称之为满二叉树 完全二叉树：深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中序号为1至n的节点对应时，称之为完全二叉树。 二、什么是堆堆可以视为一颗完全的二叉树，完全二叉树的一个“优秀”的性质是，除了最底层之外，每一层都是满的，这使得堆可以利用数组来表示（普通的一般的二叉树通常用链表作为基本容器表示），每一个结点对应数组中的一个元素。 对于给定的某个结点的下标 i，可以很容易的计算出这个结点的父结点、孩子结点的下标： Parent(i) = floor(i/2)，i 的父节点下标 Left(i) = 2i，i 的左子节点下标 Right(i) = 2i + 1，i 的右子节点下标 二叉堆一般分为两种：最大堆和最小堆 最大堆： 最大堆中的最大元素值出现在根结点（堆顶） 堆中每个父节点的元素值都大于等于其孩子结点（如果存在） 最小堆： 最小堆中的最小元素值出现在根结点（堆顶）堆中每个父节点的元素值都小于等于其孩子结点（如果存在） 三、堆排序原理堆排序就是把最大堆堆顶的最大数取出，将剩余的堆继续调整为最大堆，再次将堆顶的最大数取出，这个过程持续到剩余数只有一个时结束，在堆中定义一下几种操作： 最大堆调整（Max-Heapify）：将堆的末端子节点作调整，使得子节点永远小于父节点 创建最大堆（Build-Max-Heap）：将堆所有数据重新排序，使其成为最大堆 堆排序（Heap-Sort）：移除位在第一个数据的根节点，并做最大堆调整的递归运算 数组都是 Zero-Based，这就意味着我们的堆数据结构模型要发生改变相应的，几个计算公式也要作出相应调整： Parent(i) = floor((i-1)/2)，i 的父节点下标 Left(i) = 2i + 1，i 的左子节点下标 Right(i) = 2(i + 1)，i 的右子节点下标]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo+gitpages搭建博客]]></title>
    <url>%2F2018%2F02%2F23%2F%E4%BD%BF%E7%94%A8hexo-gitpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[注: 以下步骤基于 mac 系统 以下是我安装的一些步骤：1.进入一个目录，我是放到documents的~以下以documents示例2.在github上新建一个空的仓库，仓库的名称可以是你的用户名等等等3.打开终端(在这里给大家推荐一个无敌好用终端替代品(iterm2)，具体自行谷歌和百度哦嘿嘿)4.安装hexo npm install -g hexo-cli5.hexo init myBlog(随便你想叫什么名字)6.cd myBlog7.npm i8.可以在myblog下新建博客啦 hexo new xxxx(xxxx=博客的名字)9.然后会出现一个md文档的路径10.然后就愉快的编辑这个md文件吧 vim xxx.md11.编辑网站设置 vim _config.yml 把第6行的title改成whatever你喜欢的名字 把第9行的author改成你的名字哦 最后一行的type改成 type：git(!!：后面是有空格的) 在最后一行后面新增一行，左边与type平齐。加上一行加上一行 repo: 仓库地址 （请将仓库地址改为「你的用户名.github.io」对应的仓库地址 !!: 这个冒号后面都有空格12.npm install hexo-deployer-git –save，安装 git 部署插件13.hexo deploy14.进入「你的用户名.github.io」对应的 repo，打开 GitHub Pages 功能，如果已经打开了，就直接点击预览链接现在应该可以看到你的博客啦~ hexo主题设置对啦 hexo 还有很多主题 嘿嘿1 https://github.com/hexojs/hexo/wiki/Themes 上面有主题合集2 随便找一个主题，进入主题的 GitHub 首页 推荐大家 next3 复制它的 SSH 地址或 HTTPS 地址4 cd themes5 git clone git@github.com:iissnan/hexo-theme-next.git6 cd ..7 将 _config.yml 的第 75 行改为 theme: hexo-theme-next，保存8 hexo generate9 hexo deploy然后刷新博客 嘿嘿 尽情挑选吧]]></content>
      <tags>
        <tag>share</tag>
      </tags>
  </entry>
</search>
